from typing import List, Optional
from pydantic import BaseModel, Field

from langchain_core.documents import Document as LC_Document

class InputRequest(BaseModel):
    """Defines the input for the document ingestion process."""
    # A list of URLs to scrape for documents.
    urls: List[str] = Field(default_factory=list)
    # A local directory path to load files from.
    directory: str = ""
    # A list of topics to search for online to generate documents.
    topics: List[str] = Field(default_factory=list)


class ConversationState(BaseModel):
    """The central state object for the conversational graph."""
    # The full list of chunked source documents available to the system.
    docs: List[LC_Document] = Field(default_factory=list)
    # The most recent question asked by the user.
    current_question: Optional[str] = None
    # The search-optimized version of the user's question.
    transformed_question: Optional[str] = None
    # Documents retrieved from the vector store that are relevant to the question.
    retrieved_docs: List[LC_Document] = Field(default_factory=list)
    # A list of previous user and assistant messages to maintain context.
    conversation_history: List[dict] = Field(default_factory=list)
    # The dynamically generated prompt that defines the AI's persona and instructions.
    system_prompt: str = ""
    # The final answer generated by the assistant for the current turn.
    response: Optional[str] = None
    # The decision made by the initial routing node (e.g., 'rag' or 'direct').
    route_decision: Optional[str] = None

    # Pydantic model configuration.
    model_config = {
        # This setting allows the use of complex, non-Pydantic types like
        # LangChain's Document object within the model without raising errors.
        "arbitrary_types_allowed": True
    }